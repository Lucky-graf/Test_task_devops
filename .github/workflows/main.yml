name: CI_CD
on:
  push:
    branches: [reserve-brench, master]
  workflow_dispatch:
      

jobs:

  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    #if: github.ref == 'refs/heads/test'
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Clone reppo
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 14
      
      - name: Get yarn cache directory path
        id: test-cache-yarn
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Restore yarn cache  
        uses: actions/cache@v2
        id: cache-yarn 
        with:
          path: ${{ steps.test-cache-yarn.outputs.dir }}
          key: test-cache-yarn-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: test-cache-yarn    
      - name: Install Dependencies
        run : |
          yarn install
      - name: Run Testing
        run : yarn test --watchAll=false
        
  build-deploy-back:
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/test'
    #if: ${{ !failure() }}
    needs: test
    steps:
    - name: Clone reppo
      uses: actions/checkout@v3
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.3.0
      with:
        node-version: 14
    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - uses: actions/cache@v3
      id: npm-cache 
      if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-        
    - name: Install Dependencies
      run : |
        cd server
        npm install
    - name: Run Build App
      run : |
        cd server
        npm run build
    # Docker
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile.back
        push: true
        tags: bodya1601/todo:latest
        
  build-deploy-front:
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/test'
    needs: [build-deploy-back]
    #if: ${{ !failure() }}
    env: 
      DOCKER_BUILDKIT: 0
      COMPOSE_DOCKER_CLI_BUILD: 0
      #REACT_APP_HOST: ${{ secrets.SERVER_IP }}
      file-name: env
    steps:
      - name: Clone reppo
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.3.0
        with:
          node-version: 14
      - name: Get yarn cache directory path
        id: build-cache-yarn
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Restore yarn cache
        uses: actions/cache@v2
        id: yarn-cache 
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.build-cache-yarn.outputs.dir }}
          key: build-cache-yarn-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            build-cache-yarn 
      - name: Create .env file
        uses: ozaytsev86/create-env-file@v1    
        with:
          ENV_REACT_APP_HOST: ${{ secrets.SERVER_IP }}
      - name: Install Dependencies
        run : |
          cp ./env ./client/.env
          cd client
          yarn install
          npm install
      - name: Run Build App
        run : |
          cd client
          npm run build
      #Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile.front
          push: true
          tags: bodya1601/todo-front:latest

        
        
  deploy:
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/test'
    if: ${{ !failure() }}
    needs: [build-deploy-back, build-deploy-front]     
    steps:
    - name: Clone reppo GitHub
      uses: actions/checkout@v3
    - name: Create .env file
      uses: ozaytsev86/create-env-file@v1    
      with:
        ENV_REACT_APP_HOST: ${{ secrets.SERVER_IP }}
        ENV_DB_USER: ${{ secrets.DB_USER }}
        ENV_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}   
        file-name: env
    - name: Package file in one folder
      run: |
        mkdir ./file
        cp docker-compose.yml ./file/
        cp mongod.conf ./file/
        cp env ./file/
    - name: SFTP Deploy docker-compose.yml
      uses: wlixcc/SFTP-Deploy-Action@v1.2.2
      with:
        username: ${{ secrets.USER_NAME }}
        server: ${{ secrets.SERVER_IP }}
        ssh_private_key: ${{ secrets.SSH_PEM_KEY_AWS }}
        local_path: /github/workspace/file/*
        remote_path: app
        args: '-o ConnectTimeout=5'
        
    - name: Executing remote ssh commands using ssh-key
      uses: appleboy/ssh-action@master
      with: 
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USER_NAME }}
        key: ${{ secrets.SSH_PIVATE_KEY }}
        #fingerprint: ${{ secrets.SSH_PUBLIC_KEY }}
        port: 22
        script: |
          cd ~/app/
          mv env .env
          ls -la
          docker-compose down
          docker-compose up -d
          #rm -rf .env
    


        
